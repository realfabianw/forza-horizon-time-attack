// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String  @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String  @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  entries       Entry[]
}

model VerificationToken {
  id         String  @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Car {
  id                        Int @id @default(autoincrement())
  kId                       Int
  make                      String
  model                     String
  year                      Int?
  group                     String?
  imageLink                 String?
  stockPerformancePoints    Int?
  maxPerformancePoints      Int?
  stockDrivetrain           String?
  stockIngamePrice          Int?
  carSource                 String?
  stockSpeed                Float?
  stockHandling             Float?
  stockAcceleration         Float?
  stockLaunch               Float?
  stockBraking              Float?
  stockOffroad              Float?
  stockTopSpeedKmh          Float?
  stockLateralGs            Float?
  stock0To97                Float?
  stock0To161               Float?
  stockHorsepower           Int?
  stockWeightLbs            Int?
  entries                   Entry[]
  // tuningSetups              TuningSetup[]
}

// model TuningSetup {
//   id                  String @id @default(auto()) @map("_id") @db.ObjectId
//   carId               String
//   car                 Car @relation(fields:[carId], references: [id])
//   performancePoints   Int
//   drivetrain          String
//   buildType           String
//   shareCode           String?
//   speed               Float?
//   handling            Float?
//   acceleration        Float?
//   launch              Float?
//   braking             Float?
//   offroad             Float?
//   topSpeed            Float?
//   0To97               Float?
//   0To161              Float?
//   horsepower          Float?
//   weight              Float?
// }

model Track {
  id          Int @id @default(autoincrement())
  name        String @unique
  category    String
  type        String
  shareCode   String? @unique
  length      Float?
  entries     Entry[]
}

model Entry {
  id                Int @id @default(autoincrement())
  timestamp         DateTime
  trackId           Int
  track             Track @relation(fields: [trackId], references: [id])
  userId            String
  user              User @relation(fields:[userId], references: [id])
  carId             Int
  car               Car @relation(fields:[carId], references: [id])
  // tuningSetupId     String
  // tuningSetup       TuningSetup @relation(fields:[tuningSetupId], references: [id])
  performancePoints Int
  drivetrain        String
  buildType         String
  time              Float
  shareCode         String?
  screenshotUrl     String

  @@index([trackId])
  @@index([userId])
  @@index([carId])
}


